/**
 # 位运算简介：
    取反~ ：
    取与&：
    或 |：
    异或 ^：n ^ n = n， n ^ 0 = n
    左移<< 右移>>
 */
/**
 # 题目
 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
 > 说明：
 >> 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？
 > 示例 1:
 >> 输入: [2,2,1]
 >> 输出: 1
 > 示例 2:
 >> 输入: [4,1,2,1,2]
 >> 输出: 4
# 题解
 使用异或操作判断删除重复的元素
 */
class Solution {
    func singleNumber(_ nums: [Int]) -> Int {
        var results = nums[0]
        //使用异或遍历每一个元素，遇到相同的元素变为0，找到不同的元素异或后为本身
        for i in 1..<nums.count{
            results = nums[i] ^ results
        }
        return results
    }
}
